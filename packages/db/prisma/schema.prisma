// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  clients   Client[]
  projects  Project[]
  invoices  Invoice[]
}

model Client {
  id        String    @id @default(cuid())
  name      String
  email     String?
  phone     String?
  company   String?
  notes     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]
  invoices  Invoice[]
}

model Project {
  id        String    @id @default(cuid())
  name      String
  status    ProjectStatus @default(TODO)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  clientId  String
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  invoices  Invoice[]
}

model Invoice {
  id        String    @id @default(cuid())
  number    String    @unique
  status    InvoiceStatus @default(DRAFT)
  ht        Float
  tva       Float
  ttc       Float
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  projectId String?
  project   Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  clientId  String
  client    Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ProjectStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
}
